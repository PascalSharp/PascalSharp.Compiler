// <file>
//     <copyright see="prj:///doc/copyright.txt"/>
//     <license see="prj:///doc/license.txt"/>
//     <owner name="David Srbecký" email="dsrbecky@gmail.com"/>
//     <version>$Revision: 2201 $</version>
// </file>

// This file is automatically generated - any changes will be lost

using System;

#pragma warning disable 1591

namespace PascalSharp.Internal.Debugger.Wrappers.CorDebug
{
    public partial class ICorDebugThread
	{
		
		private Interop.CorDebug.ICorDebugThread wrappedObject;
		
		internal Interop.CorDebug.ICorDebugThread WrappedObject
		{
			get
			{
				return this.wrappedObject;
			}
		}
		
		public ICorDebugThread(Interop.CorDebug.ICorDebugThread wrappedObject)
		{
			this.wrappedObject = wrappedObject;
			ResourceManager.TrackCOMObject(wrappedObject, typeof(ICorDebugThread));
		}
		
		public static ICorDebugThread Wrap(Interop.CorDebug.ICorDebugThread objectToWrap)
		{
			if ((objectToWrap != null))
			{
				return new ICorDebugThread(objectToWrap);
			} else
			{
				return null;
			}
		}
		
		~ICorDebugThread()
		{
			object o = wrappedObject;
			wrappedObject = null;
			ResourceManager.ReleaseCOMObject(o, typeof(ICorDebugThread));
		}
		
		public bool Is<T>() where T: class
		{
			System.Reflection.ConstructorInfo ctor = typeof(T).GetConstructors()[0];
			System.Type paramType = ctor.GetParameters()[0].ParameterType;
			return paramType.IsInstanceOfType(this.WrappedObject);
		}
		
		public T As<T>() where T: class
		{
			try {
				return CastTo<T>();
			} catch {
				return null;
			}
		}
		
		public T CastTo<T>() where T: class
		{
			return (T)Activator.CreateInstance(typeof(T), this.WrappedObject);
		}
		
		public static bool operator ==(ICorDebugThread o1, ICorDebugThread o2)
		{
			return ((object)o1 == null && (object)o2 == null) ||
			       ((object)o1 != null && (object)o2 != null && o1.WrappedObject == o2.WrappedObject);
		}
		
		public static bool operator !=(ICorDebugThread o1, ICorDebugThread o2)
		{
			return !(o1 == o2);
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}
		
		public override bool Equals(object o)
		{
			ICorDebugThread casted = o as ICorDebugThread;
			return (casted != null) && (casted.WrappedObject == wrappedObject);
		}
		
		
		public ICorDebugProcess Process
		{
			get
			{
				ICorDebugProcess ppProcess;
				Interop.CorDebug.ICorDebugProcess out_ppProcess;
				this.WrappedObject.GetProcess(out out_ppProcess);
				ppProcess = ICorDebugProcess.Wrap(out_ppProcess);
				return ppProcess;
			}
		}
		
		public uint ID
		{
			get
			{
				uint pdwThreadId;
				this.WrappedObject.GetID(out pdwThreadId);
				return pdwThreadId;
			}
		}
		
		public uint Handle
		{
			get
			{
				uint phThreadHandle;
				this.WrappedObject.GetHandle(out phThreadHandle);
				return phThreadHandle;
			}
		}
		
		public ICorDebugAppDomain AppDomain
		{
			get
			{
				ICorDebugAppDomain ppAppDomain;
				Interop.CorDebug.ICorDebugAppDomain out_ppAppDomain;
				this.WrappedObject.GetAppDomain(out out_ppAppDomain);
				ppAppDomain = ICorDebugAppDomain.Wrap(out_ppAppDomain);
				return ppAppDomain;
			}
		}
		
		public void SetDebugState(CorDebugThreadState state)
		{
			this.WrappedObject.SetDebugState(((Interop.CorDebug.CorDebugThreadState)(state)));
		}
		
		public CorDebugThreadState DebugState
		{
			get
			{
				CorDebugThreadState pState;
				Interop.CorDebug.CorDebugThreadState out_pState;
				this.WrappedObject.GetDebugState(out out_pState);
				pState = ((CorDebugThreadState)(out_pState));
				return pState;
			}
		}
		
		public CorDebugUserState UserState
		{
			get
			{
				CorDebugUserState pState;
				Interop.CorDebug.CorDebugUserState out_pState;
				this.WrappedObject.GetUserState(out out_pState);
				pState = ((CorDebugUserState)(out_pState));
				return pState;
			}
		}
		
		public ICorDebugValue CurrentException
		{
			get
			{
				ICorDebugValue ppExceptionObject;
				Interop.CorDebug.ICorDebugValue out_ppExceptionObject;
				this.WrappedObject.GetCurrentException(out out_ppExceptionObject);
				ppExceptionObject = ICorDebugValue.Wrap(out_ppExceptionObject);
				return ppExceptionObject;
			}
		}
		
		public void ClearCurrentException()
		{
			this.WrappedObject.ClearCurrentException();
		}
		
		public Wrappers.CorDebug.ICorDebugStepper CreateStepper()
		{
			Wrappers.CorDebug.ICorDebugStepper ppStepper;
			Interop.CorDebug.ICorDebugStepper out_ppStepper;
			this.WrappedObject.CreateStepper(out out_ppStepper);
			ppStepper = ICorDebugStepper.Wrap(out_ppStepper);
			return ppStepper;
		}
		
		public Wrappers.CorDebug.ICorDebugChainEnum EnumerateChains()
		{
			Wrappers.CorDebug.ICorDebugChainEnum ppChains;
			Interop.CorDebug.ICorDebugChainEnum out_ppChains;
			this.WrappedObject.EnumerateChains(out out_ppChains);
			ppChains = ICorDebugChainEnum.Wrap(out_ppChains);
			return ppChains;
		}
		
		public Wrappers.CorDebug.ICorDebugChain ActiveChain
		{
			get
			{
				Wrappers.CorDebug.ICorDebugChain ppChain;
				Interop.CorDebug.ICorDebugChain out_ppChain;
				this.WrappedObject.GetActiveChain(out out_ppChain);
				ppChain = ICorDebugChain.Wrap(out_ppChain);
				return ppChain;
			}
		}
		
		public Wrappers.CorDebug.ICorDebugFrame ActiveFrame
		{
			get
			{
				Wrappers.CorDebug.ICorDebugFrame ppFrame;
				Interop.CorDebug.ICorDebugFrame out_ppFrame;
				this.WrappedObject.GetActiveFrame(out out_ppFrame);
				ppFrame = ICorDebugFrame.Wrap(out_ppFrame);
				return ppFrame;
			}
		}
		
		public ICorDebugRegisterSet RegisterSet
		{
			get
			{
				ICorDebugRegisterSet ppRegisters;
				Interop.CorDebug.ICorDebugRegisterSet out_ppRegisters;
				this.WrappedObject.GetRegisterSet(out out_ppRegisters);
				ppRegisters = ICorDebugRegisterSet.Wrap(out_ppRegisters);
				return ppRegisters;
			}
		}
		
		public ICorDebugEval CreateEval()
		{
			ICorDebugEval ppEval;
			Interop.CorDebug.ICorDebugEval out_ppEval;
			this.WrappedObject.CreateEval(out out_ppEval);
			ppEval = ICorDebugEval.Wrap(out_ppEval);
			return ppEval;
		}
		
		public ICorDebugValue Object
		{
			get
			{
				ICorDebugValue ppObject;
				Interop.CorDebug.ICorDebugValue out_ppObject;
				this.WrappedObject.GetObject(out out_ppObject);
				ppObject = ICorDebugValue.Wrap(out_ppObject);
				return ppObject;
			}
		}
	}
}

#pragma warning restore 1591
