// <file>
//     <copyright see="prj:///doc/copyright.txt"/>
//     <license see="prj:///doc/license.txt"/>
//     <owner name="David SrbeckÃ½" email="dsrbecky@gmail.com"/>
//     <version>$Revision: 2201 $</version>
// </file>

// This file is automatically generated - any changes will be lost

using System;

#pragma warning disable 1591

namespace PascalSharp.Internal.Debugger.Wrappers.CorDebug
{
    public partial class ICorDebugFrame
	{
		
		private Interop.CorDebug.ICorDebugFrame wrappedObject;
		
		internal Interop.CorDebug.ICorDebugFrame WrappedObject
		{
			get
			{
				return this.wrappedObject;
			}
		}
		
		public ICorDebugFrame(Interop.CorDebug.ICorDebugFrame wrappedObject)
		{
			this.wrappedObject = wrappedObject;
			ResourceManager.TrackCOMObject(wrappedObject, typeof(Wrappers.CorDebug.ICorDebugFrame));
		}
		
		public static Wrappers.CorDebug.ICorDebugFrame Wrap(Interop.CorDebug.ICorDebugFrame objectToWrap)
		{
			if ((objectToWrap != null))
			{
				return new Wrappers.CorDebug.ICorDebugFrame(objectToWrap);
			} else
			{
				return null;
			}
		}
		
		~ICorDebugFrame()
		{
			object o = wrappedObject;
			wrappedObject = null;
			ResourceManager.ReleaseCOMObject(o, typeof(Wrappers.CorDebug.ICorDebugFrame));
		}
		
		public bool Is<T>() where T: class
		{
			System.Reflection.ConstructorInfo ctor = typeof(T).GetConstructors()[0];
			System.Type paramType = ctor.GetParameters()[0].ParameterType;
			return paramType.IsInstanceOfType(this.WrappedObject);
		}
		
		public T As<T>() where T: class
		{
			try {
				return CastTo<T>();
			} catch {
				return null;
			}
		}
		
		public T CastTo<T>() where T: class
		{
			return (T)Activator.CreateInstance(typeof(T), this.WrappedObject);
		}
		
		public static bool operator ==(Wrappers.CorDebug.ICorDebugFrame o1, Wrappers.CorDebug.ICorDebugFrame o2)
		{
			return ((object)o1 == null && (object)o2 == null) ||
			       ((object)o1 != null && (object)o2 != null && o1.WrappedObject == o2.WrappedObject);
		}
		
		public static bool operator !=(Wrappers.CorDebug.ICorDebugFrame o1, Wrappers.CorDebug.ICorDebugFrame o2)
		{
			return !(o1 == o2);
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}
		
		public override bool Equals(object o)
		{
			Wrappers.CorDebug.ICorDebugFrame casted = o as Wrappers.CorDebug.ICorDebugFrame;
			return (casted != null) && (casted.WrappedObject == wrappedObject);
		}
		
		
		public Wrappers.CorDebug.ICorDebugChain Chain
		{
			get
			{
				Wrappers.CorDebug.ICorDebugChain ppChain;
				Interop.CorDebug.ICorDebugChain out_ppChain;
				this.WrappedObject.GetChain(out out_ppChain);
				ppChain = ICorDebugChain.Wrap(out_ppChain);
				return ppChain;
			}
		}
		
		public ICorDebugCode Code
		{
			get
			{
				ICorDebugCode ppCode;
				Interop.CorDebug.ICorDebugCode out_ppCode;
				this.WrappedObject.GetCode(out out_ppCode);
				ppCode = ICorDebugCode.Wrap(out_ppCode);
				return ppCode;
			}
		}
		
		public ICorDebugFunction Function
		{
			get
			{
				ICorDebugFunction ppFunction;
				Interop.CorDebug.ICorDebugFunction out_ppFunction;
				this.WrappedObject.GetFunction(out out_ppFunction);
				ppFunction = ICorDebugFunction.Wrap(out_ppFunction);
				return ppFunction;
			}
		}
		
		public uint FunctionToken
		{
			get
			{
				uint pToken;
				this.WrappedObject.GetFunctionToken(out pToken);
				return pToken;
			}
		}
		
		public ulong GetStackRange(out ulong pStart)
		{
			ulong pEnd;
			this.WrappedObject.GetStackRange(out pStart, out pEnd);
			return pEnd;
		}
		
		public Wrappers.CorDebug.ICorDebugFrame Caller
		{
			get
			{
				Wrappers.CorDebug.ICorDebugFrame ppFrame;
				Interop.CorDebug.ICorDebugFrame out_ppFrame;
				this.WrappedObject.GetCaller(out out_ppFrame);
				ppFrame = Wrap(out_ppFrame);
				return ppFrame;
			}
		}
		
		public Wrappers.CorDebug.ICorDebugFrame Callee
		{
			get
			{
				Wrappers.CorDebug.ICorDebugFrame ppFrame;
				Interop.CorDebug.ICorDebugFrame out_ppFrame;
				this.WrappedObject.GetCallee(out out_ppFrame);
				ppFrame = Wrap(out_ppFrame);
				return ppFrame;
			}
		}
		
		public Wrappers.CorDebug.ICorDebugStepper CreateStepper()
		{
			Wrappers.CorDebug.ICorDebugStepper ppStepper;
			Interop.CorDebug.ICorDebugStepper out_ppStepper;
			this.WrappedObject.CreateStepper(out out_ppStepper);
			ppStepper = ICorDebugStepper.Wrap(out_ppStepper);
			return ppStepper;
		}
	}
}

#pragma warning restore 1591
